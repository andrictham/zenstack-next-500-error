//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views", "relationJoins"]
}

/// @@allow('create', true)
/// @@allow('all', auth().id == this.id)
/// @@allow('read', withSpaces?[space.withMembers?[user.id == auth().id]])
/// User table, that syncs via Webhooks from Clerk
model User {
  /// User ID assigned by Clerk
  id                    String               @id()
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt()
  hasOwnedSpaces        Space[]
  withSpaces            Space_User[]
  hasLists              List[]
  hasTodos              Todo[]
  hasClerkUserEvents    ClerkUserEvents[]
  hasClerkSessionEvents ClerkSessionEvents[]
  /// Deleted in Clerk
  isDeleted             Boolean              @default(false)
  /// Timestamped by our webhook handler
  deletedAt             DateTime?
}

/// @@deny('all', auth() == null)
/// @@allow('create', true)
/// @@allow('read', withMembers?[user.id == auth().id])
/// @@allow('update,delete', withMembers?[user.id == auth().id && role == 'ADMIN'])
model Space {
  id          String       @id() @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt()
  name        String
  slug        String       @unique()
  fromOwner   User         @relation(fields: [fromOwnerId], references: [id], onDelete: Cascade)
  fromOwnerId String
  withMembers Space_User[]
  hasLists    List[]
}

/// @@deny('all', auth() == null)
/// @@allow('all', space.fromOwner.id == auth().id || space.withMembers?[user.id == auth().id && role == 'ADMIN'])
/// @@allow('read', space.withMembers?[user.id == auth().id])
/// a join table for many-to-many relation between `Space` and `User`
model Space_User {
  id        String   @id() @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  space     Space    @relation(fields: [spaceId], references: [id], onDelete: Cascade)
  spaceId   String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  /// A userâ€™s role in the space. One of: ADMIN, USER
  role      String   @default("USER")

  @@unique([userId, spaceId])
}

/// @@deny('all', auth() == null)
/// @@deny('update', future().fromOwner != fromOwner)
/// @@allow('read', fromOwner.id == auth().id || (fromSpace.withMembers?[user.id == auth().id] && !private))
/// @@allow('create,update', fromOwner.id == auth().id && fromSpace.withMembers?[user.id == auth().id])
/// @@allow('delete', fromOwner.id == auth().id)
model List {
  id          String   @id() @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt()
  title       String
  private     Boolean  @default(false)
  hasTodos    Todo[]
  fromSpace   Space    @relation(fields: [fromSpaceId], references: [id], onDelete: Cascade)
  fromSpaceId String
  fromOwner   User     @relation(fields: [fromOwnerId], references: [id], onDelete: Cascade)
  /// @deny('update', true)
  fromOwnerId String
}

/// @@deny('all', auth() == null)
/// @@allow('all', fromOwner.id == auth().id || fromList.fromOwner.id == auth().id)
/// @@allow('all', fromList.fromSpace.withMembers?[user.id == auth().id] && !fromList.private)
model Todo {
  id          String    @id() @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt()
  title       String
  description String?
  completedAt DateTime?
  fromList    List      @relation(fields: [fromListId], references: [id], onDelete: Cascade)
  fromListId  String
  fromOwner   User      @relation(fields: [fromOwnerID], references: [id])
  /// @deny('update', true)
  fromOwnerID String
}

/// @@allow('read', auth() != null)
/// Clerk user.created and user.updated events from webhooks
model ClerkUserEvents {
  eventID       String   @id()
  /// When the event was added to our database
  createdAt     DateTime @default(now())
  fromUser      User     @relation(fields: [fromUserID], references: [id])
  fromUserID    String
  /// @omit
  /// When the Clerk user was created in Clerk
  userCreatedAt Float
  /// @omit
  /// When the Clerk user was updated in Clerk
  userUpdatedAt Float
  primaryEmail  String
  firstName     String
  lastName      String
  imageURL      String?
  banned        Boolean
}

model ClerkSessionEvents {
  eventID             String   @id()
  /// When the event was added to our database
  createdAt           DateTime @default(now())
  fromUser            User     @relation(fields: [fromUserID], references: [id])
  fromUserID          String
  sessionID           String
  clientID            String
  sessionStatus       String
  sessionCreatedAt    Float
  sessionLastActiveAt Float
  sessionUpdatedAt    Float
  sessionAbandonAt    Float
  sessionExpireAt     Float
}
